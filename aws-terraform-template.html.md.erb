---
title: Deploying BOSH and Ops Manager to AWS
owner: Ops Manager
---

<strong><%= modified_date %></strong>

This topic describes how to use the Terraform templates to deploy BOSH and
Ops Manager to Amazon Web Services (AWS), as a part of installing [Pivotal Cloud Foundry](https://network.pivotal.io/products/pivotal-cf) (PCF).

An AWS Terraform template describes a set of AWS resources and properties.
The template used in this topic is designed to output the resources necessary
for three availability zones (AZ), with an Ops Manager, Pivotal Application Service (PAS),
and services subnet in each AZ. The Elastic Load Balancer will be attached to
the public subnet the AZs to balance traffic.

## <a id='prereq'></a> Prerequisites

The procedure in this topic requires the following:

* **An AWS Region with at least 3 availability zones**: Before following the
  procedure below, confirm that you have selected the correct region within
  your AWS account. All of the AWS resources for your deployment must exist
  within a single region.
  See the <a href='http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions-availability-zones'>Amazon documentation on regions and availability zones</a> for help selecting the correct region for your deployment.
  <p class="note"><strong>Note</strong>: To deploy PCF to AWS GovCloud (US), select the <code>us-gov-west-1</code> region.</p>

* **An AWS SSH keypair**: You must provide an AWS SSH keypair name as a
  parameter for the Terraform template. If you do not have a pre-existing
  key pair, create one in
  [AWS](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#having-ec2-create-your-key-pair).
  Save the resulting private key file in a secure location.

* **A registered wildcard domain**: You must enter a wildcard domain as the
  `Common name` when creating your SSL certificate.

## <a id='upload-cert'></a>Step 1: Upload an SSL Certificate to AWS ##

You can add an SSL Certificate using two methods:

  * The [AWS CLI](#aws-cli)
  * The [AWS Certificate Manager](#aws-certificate-manager)

### <a id="aws-cli"></a>(Option) Create SSL Certificate using the AWS CLI

The [AWS CLI](https://aws.amazon.com/cli/) must be installed on your machine and configured to a user account with admin access privileges on your AWS account.

1. Obtain or create an SSL server certificate.
For more information, see the [AWS documentation on SSL certificates](http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/ssl-server-cert.html). When you create a certificate signing request (CSR) in the "Create a Server Certificate" instructions, you must use your wildcard domain as the Common Name input.

1. Add the following additional domains and wildcards using the OpenSSL SAN (subjectAltName) extension: 
  * `*.sys.example.com`
  * `*.login.sys.example.com`
  * `*.uaa.sys.example.com`
  * `*.apps.example.com`
  <p class='note'><strong>Note</strong>: If you use a self-signed certificate or select the "Generate Self-Signed RSA Certificate" option during the <a href="./../customizing/aws-terraform-er-config.html#security-config">Deploying PAS on AWS</a> installation process, you can ignore the step above. However, make sure you upload the self-signed certificate to AWS and attach the certificate to the listeners on the AWS Elastic Load Balancer. Pivotal recommends only using a self-signed certificate for testing and development.</p>

1. Record the value of the certificate and key to use when [editing](#editing-terraform-vars)
  the Terraform Variables File. Alternatively, if you know the name of the certificate,
  you can run the following command to retrieve certificate metadata later:
  <pre class='terminal'>$ aws iam get-server-certificate --server-certificate-name YOUR-CERT-NAME</pre>
  For example: <pre class='terminal'>$ aws iam get-server-certificate --server-certificate-name myServerCertificate</pre>

### <a id="aws-certificate-manager"></a>(Option) Create SSL Certificate using the AWS Certificate Manager

1. Log into your AWS management console and navigate to **Certificate Manager**. If your Certificate Manager has no certificates, click **Get Started**.

1. Under **Add domain names**, enter the following wildcard subdomains to the certificate, based on your domain (example: example.com). Click **Add another name to this certificate** until you have entered them all:
  * `*.example.com`
  * `*.sys.example.com`
  * `*.login.sys.example.com`
  * `*.uaa.sys.example.com`
  * `*.apps.example.com`

1. Click **Review and Request** to review, and **Confirm and Request** to confirm.

1. Check the email account registered for the domain owner. Open the certificate approval email message sent from Amazon Certificates, and click the email link to the approval page for the SSL certificate.

1. From the approval page, click **I Approve**.

1. Record the value of the certificate and key to use when [editing](#editing-terraform-vars)
  the Terraform Variables File. Alternatively, if you know the name of the certificate,
  you can run the following command to retrieve certificate metadata later:
  <pre class='terminal'>$ aws iam get-server-certificate --server-certificate-name YOUR-CERT-NAME</pre>
  For example: <pre class='terminal'>$ aws iam get-server-certificate --server-certificate-name myServerCertificate</pre>

## <a id='download-template'></a>Step 2: Download and Edit the Terraform Variables File ##

1. Navigate to the Pivotal Application Service (PAS) release on [Pivotal Network](https://network.pivotal.io). 

1. Download the AWS Terraform zip file.

1. Extract the contents of the zip file and place the folder in your `workspace` directory on your local machine.

1. From a terminal window, navigate to the folder:
  <pre class="terminal">$ cd ~/workspace/TERRAFORMING-AWS-FOLDER</pre>

1. Create a new file named `terraform.tfvars`.
  <pre class="terminal">$ touch terraform.tfvars</pre>

1. Open the `terraform.tfvars` file and paste in the following contents:


    ```
    env_name           = "YOUR-ENVIRONMENT-NAME"
    access_key         = "YOUR-ACCESS-KEY"
    secret_key         = "YOUR-SECRET-KEY"
    region             = "YOUR-AWS-REGION"
    availability_zones = ["YOUR-AZ-1", "YOUR-AZ-2", "YOUR-AZ-3"]
    ops_manager_ami    = "YOUR-OPS-MAN-AMI"
    dns_suffix         = "YOUR-DNS-SUFFIX"
    ```


1. Edit the values in the file according to the table below:
  <table>
    <tr>
      <th style="width: 35%">Value to replace</th>
      <th>Guidance</th>
    </tr>
    <tr>
      <td><code>YOUR-ENVIRONMENT-NAME</code></td>
      <td>Enter a name to use to identify resources in AWS. Terraform prepends the names of the resources it creates with this environment name. Example: <code>pcf</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-ACCESS-KEY</code></td>
      <td>Enter your AWS Access Key.</td>
    </tr>
    <tr>
      <td><code>YOUR-SECRET-KEY</code></td>
      <td>Enter your AWS Secret Key.</td>
    </tr>
    <tr>
      <td><code>YOUR-OPS-MAN-AMI</code></td>
      <td>Enter the ami of the Ops Manager image you want to boot. You can find this in the PDF included with the Ops Manager release on <a href="https://network.pivotal.io/">Pivotal Network</a>.</td>
    </tr>
    <tr>
      <td><code>YOUR-AWS-REGION</code></td>
      <td>Enter the name of the AWS region in which you want Terraform to create resources. Example: <code>us-east-1</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-AZ-1<br>YOUR-AZ-2<br>YOUR-AZ-3</code></td>
      <td>Enter three availability zones from your region. Example: <code>us-east-1a</code>, <code>us-east-1b</code>, <code>us-east-1c</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-DNS-SUFFIX</code></td>
      <td>Enter a domain name to use as part of the system domain for your PCF deployment. Terraform creates DNS records in GCP using <code>YOUR-ENVIRONMENT-NAME</code> and <code>YOUR-DNS-SUFFIX</code>. For example, if you enter <code>example.com</code> for your DNS suffix and have <code>pcf</code> as your environment name, Terraform will create DNS records at <code>pcf.example.com</code>.</td>
    </tr>
  </table>


## <a id="optional-variables"></a>Step 3: Add Optional Variables ##

Complete this step if you want to do any of the following:

- Deploy the Isolation Segment Tile
- Use an RDS instance

In your `terraform.tfvars` file, specify the appropriate variables from the sections below.


### <a id="iso_seg"></a> Isolation Segments

If you plan to deploy the Isolation Segment tile, add the following variables to your
`terraform.tfvars` file, replacing `YOUR-CERTIFICATE` and `YOUR-PRIVATE-KEY` with a
certificate and private key. This causes terraform to create an additional HTTP
load balancer across three availability zones to use for the Isolation Segment tile.

```
create_isoseg_resources: 1
iso_seg_ssl_cert = <<ISO_SEG_SSL_CERT
-----BEGIN CERTIFICATE-----
YOUR-CERTIFICATE
-----END CERTIFICATE-----
ISO_SEG_SSL_CERT
iso_seg_ssl_cert_private_key = <<ISO_SEG_SSL_KEY
-----BEGIN RSA PRIVATE KEY-----
YOUR-PRIVATE-KEY
-----END RSA PRIVATE KEY-----
ISO_SEG_SSL_KEY
```


### <a id="rds"></a> RDS

If you plan to use an RDS for your deployment, add the following variables to your
`terraform.tfvars` file:

```
rds_instance_count = 1
rds_instance_class = YOUR-DB-SIZE
rds_db_username    = YOUR-DB-USERNAME
```


## <a id="download"></a>Step 4: Create AWS Resources with Terraform ##

Follow these steps to use the Terraform CLI to create resources on AWS:

1. From the directory that contains the Terraform files, run the following
command to initialize the directory based on the information you specified in the `terraform.tfvars` file.
  <pre class="terminal">$ terraform init</pre>

1. Run the following command. It may take several minutes for Terraform to create all the resources in GCP.
  <pre class="terminal">$ terraform apply</pre>

## <a id="dns"></a>Step 5: Create DNS Record ##

1. In a browser, navigate to the DNS provider for the DNS suffix you entered in your `terraform.tfvars` file.

1. Create a new NS (Name server) record for your PCF system domain. Your system domain is `YOUR-ENVIRONMENT-NAME.YOUR-DNS-SUFFIX`.
  1. In this record, enter the name servers included in `env_dns_zone_name_servers` from your Terraform output.

## <a id="next"></a> What to Do Next ##

Proceed to the next step in the deployment, [Configuring Ops Manager on AWS (Terraform)](./aws-terraform-om-config.html).
